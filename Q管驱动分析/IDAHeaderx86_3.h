PDEVICE_OBJECT __stdcall IoGetDeviceAttachmentBaseRef(PDEVICE_OBJECT DeviceObject);
PDEVICE_OBJECT __stdcall __imp_IoGetDeviceAttachmentBaseRef(PDEVICE_OBJECT DeviceObject);
PEPROCESS __stdcall IoThreadToProcess(PETHREAD Thread);
PEPROCESS __stdcall __imp_IoThreadToProcess(PETHREAD Thread);
NTSTATUS __stdcall PsLookupProcessByProcessId(HANDLE ProcessId,PEPROCESS *Process);
NTSTATUS __stdcall __imp_PsLookupProcessByProcessId(HANDLE ProcessId,PEPROCESS *Process);
NTSTATUS __stdcall IoQueryFileDosDeviceName(PFILE_OBJECT FileObject,POBJECT_NAME_INFORMATION *ObjectNameInformation);
NTSTATUS __stdcall __imp_IoQueryFileDosDeviceName(PFILE_OBJECT FileObject,POBJECT_NAME_INFORMATION *ObjectNameInformation);
NTSTATUS __stdcall ObQueryNameString(PVOID Object,POBJECT_NAME_INFORMATION ObjectNameInfo,ULONG Length,PULONG ReturnLength);
NTSTATUS __stdcall __imp_ObQueryNameString(PVOID Object,POBJECT_NAME_INFORMATION ObjectNameInfo,ULONG Length,PULONG ReturnLength);
NTSTATUS __stdcall NtCreateKey(PHANDLE KeyHandle,ACCESS_MASK DesiredAccess,POBJECT_ATTRIBUTES ObjectAttributes,ULONG TitleIndex,PUNICODE_STRING Class,ULONG CreateOptions,PULONG Disposition);
NTSTATUS __stdcall __imp_NtCreateKey(PHANDLE KeyHandle,ACCESS_MASK DesiredAccess,POBJECT_ATTRIBUTES ObjectAttributes,ULONG TitleIndex,PUNICODE_STRING Class,ULONG CreateOptions,PULONG Disposition);
BOOLEAN __stdcall FsRtlIsNameInExpression(PUNICODE_STRING Expression,PUNICODE_STRING Name,BOOLEAN IgnoreCase,PWCH UpcaseTable);
BOOLEAN __stdcall __imp_FsRtlIsNameInExpression(PUNICODE_STRING Expression,PUNICODE_STRING Name,BOOLEAN IgnoreCase,PWCH UpcaseTable);
NTSTATUS __stdcall ObOpenObjectByPointer(PVOID Object,ULONG HandleAttributes,PACCESS_STATE PassedAccessState,ACCESS_MASK DesiredAccess,POBJECT_TYPE ObjectType,KPROCESSOR_MODE AccessMode, PHANDLE Handle);      
NTSTATUS __stdcall __imp_ObOpenObjectByPointer(PVOID Object,ULONG HandleAttributes,PACCESS_STATE PassedAccessState,ACCESS_MASK DesiredAccess,POBJECT_TYPE ObjectType,KPROCESSOR_MODE AccessMode, PHANDLE Handle);
NTSTATUS __stdcall ObOpenObjectByName(POBJECT_ATTRIBUTES ObjectAttributes,POBJECT_TYPE ObjectType,KPROCESSOR_MODE AccessMode,PACCESS_STATE AccessState,ACCESS_MASK DesiredAccess,PVOID ParseContext,PHANDLE Handle);
NTSTATUS __stdcall __imp_ObOpenObjectByName(POBJECT_ATTRIBUTES ObjectAttributes,POBJECT_TYPE ObjectType,KPROCESSOR_MODE AccessMode,PACCESS_STATE AccessState,ACCESS_MASK DesiredAccess,PVOID ParseContext,PHANDLE Handle);
NTSTATUS __stdcall PsLookupProcessThreadByCid(PCLIENT_ID Cid,PEPROCESS *Process,PETHREAD *Thread);
NTSTATUS __stdcall __imp_PsLookupProcessThreadByCid(PCLIENT_ID Cid,PEPROCESS *Process,PETHREAD *Thread);
NTSTATUS __stdcall SeCreateAccessState(PACCESS_STATE AccessState,PVOID AuxData,ACCESS_MASK DesiredAccess,PGENERIC_MAPPING GenericMapping);
NTSTATUS __stdcall __imp_SeCreateAccessState(PACCESS_STATE AccessState,PVOID AuxData,ACCESS_MASK DesiredAccess,PGENERIC_MAPPING GenericMapping);
NTSTATUS __stdcall PsLookupThreadByThreadId(HANDLE ThreadId,PETHREAD *Thread);
NTSTATUS __stdcall __imp_PsLookupThreadByThreadId(HANDLE ThreadId,PETHREAD *Thread);
void __stdcall KeInitializeApc(PRKAPC Apc,PRKTHREAD Thread,KAPC_ENVIRONMENT Environment,PKKERNEL_ROUTINE KernelRoutine,PKRUNDOWN_ROUTINE RundownRoutine,PKNORMAL_ROUTINE NormalRoutine,KPROCESSOR_MODE ProcessorMode,PVOID NormalContext);
void __stdcall __imp_KeInitializeApc(PRKAPC Apc,PRKTHREAD Thread,KAPC_ENVIRONMENT Environment,PKKERNEL_ROUTINE KernelRoutine,PKRUNDOWN_ROUTINE RundownRoutine,PKNORMAL_ROUTINE NormalRoutine,KPROCESSOR_MODE ProcessorMode,PVOID NormalContext);	
BOOLEAN __stdcall KeInsertQueueApc(PRKAPC Apc,PVOID SystemArgument1,PVOID SystemArgument2,KPRIORITY Increment);
BOOLEAN __stdcall __imp_KeInsertQueueApc(PRKAPC Apc,PVOID SystemArgument1,PVOID SystemArgument2,KPRIORITY Increment);	
BOOLEAN __stdcall PsGetVersion(PULONG MajorVersion,PULONG MinorVersion,PULONG BuildNumber,PUNICODE_STRING CSDVersion);
BOOLEAN __stdcall __imp_PsGetVersion(PULONG MajorVersion,PULONG MinorVersion,PULONG BuildNumber,PUNICODE_STRING CSDVersion);
typedef void (__stdcall *PCREATE_THREAD_NOTIFY_ROUTINE)(HANDLE ProcessId,HANDLE ThreadId,BOOLEAN Create);
NTSTATUS __stdcall PsSetCreateThreadNotifyRoutine(PCREATE_THREAD_NOTIFY_ROUTINE NotifyRoutine);
NTSTATUS __stdcall __imp_PsSetCreateThreadNotifyRoutine(PCREATE_THREAD_NOTIFY_ROUTINE NotifyRoutine);
NTSTATUS __stdcall ObCloseHandle(HANDLE Handle,KPROCESSOR_MODE PreviousMode);
NTSTATUS __stdcall __imp_ObCloseHandle(HANDLE Handle,KPROCESSOR_MODE PreviousMode);
UCHAR * __stdcall PsGetProcessImageFileName(PEPROCESS Process);
UCHAR * __stdcall __imp_PsGetProcessImageFileName(PEPROCESS Process);
typedef ULONG DEVICE_TYPE ;
NTSTATUS __stdcall IoCreateDevice(PDRIVER_OBJECT DriverObject,ULONG DeviceExtensionSize,PUNICODE_STRING DeviceName,DEVICE_TYPE DeviceType,ULONG DeviceCharacteristics,BOOLEAN Exclusive,PDEVICE_OBJECT *DeviceObject);
NTSTATUS __stdcall __imp_IoCreateDevice(PDRIVER_OBJECT DriverObject,ULONG DeviceExtensionSize,PUNICODE_STRING DeviceName,DEVICE_TYPE DeviceType,ULONG DeviceCharacteristics,BOOLEAN Exclusive,PDEVICE_OBJECT *DeviceObject);
NTSTATUS __stdcall ZwTerminateProcess(HANDLE ProcessHandle,NTSTATUS ExitStatus);
NTSTATUS __stdcall __imp_ZwTerminateProcess(HANDLE ProcessHandle,NTSTATUS ExitStatus);
NTSTATUS __stdcall ZwQueryObject(HANDLE Handle,OBJECT_INFORMATION_CLASS ObjectInformationClass,PVOID ObjectInformation,ULONG ObjectInformationLength,PULONG ReturnLength);
NTSTATUS __stdcall __imp_ZwQueryObject(HANDLE Handle,OBJECT_INFORMATION_CLASS ObjectInformationClass,PVOID ObjectInformation,ULONG ObjectInformationLength,PULONG ReturnLength);
NTSTATUS __stdcall RtlVolumeDeviceToDosName(PVOID VolumeDeviceObject,PUNICODE_STRING DosName);
NTSTATUS __stdcall __imp_RtlVolumeDeviceToDosName(PVOID VolumeDeviceObject,PUNICODE_STRING DosName);
NTSTATUS __stdcall ZwUnloadDriver(PUNICODE_STRING DriverServiceName);
NTSTATUS __stdcall __imp_ZwUnloadDriver(PUNICODE_STRING DriverServiceName);
NTSTATUS __stdcall ZwLoadDriver(PUNICODE_STRING DriverServiceName);
NTSTATUS __stdcall __imp_ZwLoadDriver(PUNICODE_STRING DriverServiceName);
typedef void (__stdcall *PLOAD_IMAGE_NOTIFY_ROUTINE)(PUNICODE_STRING FullImageName,HANDLE ProcessId,PIMAGE_INFO ImageInfo);
typedef void (__stdcall *PCREATE_PROCESS_NOTIFY_ROUTINE)(HANDLE ParentId,HANDLE ProcessId,BOOLEAN Create);
NTSTATUS __stdcall PsSetLoadImageNotifyRoutine(PLOAD_IMAGE_NOTIFY_ROUTINE NotifyRoutine);
NTSTATUS __stdcall __imp_PsSetLoadImageNotifyRoutine(PLOAD_IMAGE_NOTIFY_ROUTINE NotifyRoutine);
NTSTATUS __stdcall ZwQueryInformationProcess(HANDLE ProcessHandle,PROCESSINFOCLASS ProcessInformationClass,PVOID ProcessInformation,ULONG ProcessInformationLength,PULONG ReturnLength);
NTSTATUS __stdcall __imp_ZwQueryInformationProcess(HANDLE ProcessHandle,PROCESSINFOCLASS ProcessInformationClass,PVOID ProcessInformation,ULONG ProcessInformationLength,PULONG ReturnLength);
HANDLE __stdcall PsGetCurrentThreadId(void);
HANDLE __stdcall __imp_PsGetCurrentThreadId(void);
NTSTATUS __stdcall RtlGetVersion(PRTL_OSVERSIONINFOW lpVersionInformation);
NTSTATUS __stdcall __imp_RtlGetVersion(PRTL_OSVERSIONINFOW lpVersionInformation);
NTSTATUS __stdcall PsSetCreateProcessNotifyRoutine(PCREATE_PROCESS_NOTIFY_ROUTINE NotifyRoutine,BOOLEAN Remove);
NTSTATUS __stdcall __imp_PsSetCreateProcessNotifyRoutine(PCREATE_PROCESS_NOTIFY_ROUTINE NotifyRoutine,BOOLEAN Remove);
BOOLEAN __stdcall SeSinglePrivilegeCheck(LUID PrivilegeValue,KPROCESSOR_MODE PreviousMode);  
BOOLEAN __stdcall __imp_SeSinglePrivilegeCheck(LUID PrivilegeValue,KPROCESSOR_MODE PreviousMode);  
PGENERIC_MAPPING __stdcall IoGetFileObjectGenericMapping(void);
PGENERIC_MAPPING __stdcall __imp_IoGetFileObjectGenericMapping(void);
void __stdcall SeDeleteAccessState(PACCESS_STATE AccessState);
void __stdcall __imp_SeDeleteAccessState(PACCESS_STATE AccessState);
NTSTATUS __stdcall ZwQuerySystemInformation(SYSTEM_INFORMATION_CLASS SystemInformationClass,PVOID SystemInformation,ULONG SystemInformationLength,PULONG ReturnLength);
NTSTATUS __stdcall __imp_ZwQuerySystemInformation(SYSTEM_INFORMATION_CLASS SystemInformationClass,PVOID SystemInformation,ULONG SystemInformationLength,PULONG ReturnLength);
void __stdcall KeUnstackDetachProcess (PRKAPC_STATE ApcState);
void __stdcall __imp_KeUnstackDetachProcess (PRKAPC_STATE ApcState);
NTSTATUS __stdcall ZwOpenProcessTokenEx(HANDLE ProcessHandle,ACCESS_MASK DesiredAccess,ULONG HandleAttributes,PHANDLE TokenHandle);
NTSTATUS __stdcall __imp_ZwOpenProcessTokenEx(HANDLE ProcessHandle,ACCESS_MASK DesiredAccess,ULONG HandleAttributes,PHANDLE TokenHandle);
NTSTATUS __stdcall ZwQueryInformationToken (HANDLE TokenHandle,TOKEN_INFORMATION_CLASS TokenInformationClass,PVOID TokenInformation,ULONG TokenInformationLength,PULONG ReturnLength);
NTSTATUS __stdcall __imp_ZwQueryInformationToken (HANDLE TokenHandle,TOKEN_INFORMATION_CLASS TokenInformationClass,PVOID TokenInformation,ULONG TokenInformationLength,PULONG ReturnLength);
void __stdcall KeStackAttachProcess(PRKPROCESS PROCESS,PRKAPC_STATE ApcState);
void __stdcall __imp_KeStackAttachProcess(PRKPROCESS PROCESS,PRKAPC_STATE ApcState);
NTSTATUS __stdcall ZwAllocateVirtualMemory(HANDLE ProcessHandle,PVOID *BaseAddress,ULONG_PTR ZeroBits,PSIZE_T RegionSize,ULONG AllocationType,ULONG Protect);
NTSTATUS __stdcall __imp_ZwAllocateVirtualMemory(HANDLE ProcessHandle,PVOID *BaseAddress,ULONG_PTR ZeroBits,PSIZE_T RegionSize,ULONG AllocationType,ULONG Protect);
NTSTATUS __stdcall RtlUpcaseUnicodeString(PUNICODE_STRING DestinationString,PCUNICODE_STRING SourceString,BOOLEAN AllocateDestinationString);
NTSTATUS __stdcall __imp_RtlUpcaseUnicodeString(PUNICODE_STRING DestinationString,PCUNICODE_STRING SourceString,BOOLEAN AllocateDestinationString);
BOOLEAN __stdcall MmIsAddressValid(PVOID VirtualAddress);
BOOLEAN __stdcall __imp_MmIsAddressValid(PVOID VirtualAddress);
NTSTATUS __stdcall ExUuidCreate(UUID *Uuid);
NTSTATUS __stdcall __imp_ExUuidCreate(UUID *Uuid);
NTSTATUS __stdcall PsReferenceProcessFilePointer(PEPROCESS Process,PVOID *pFilePointer);
NTSTATUS __stdcall __imp_PsReferenceProcessFilePointer(PEPROCESS Process,PVOID *pFilePointer);

